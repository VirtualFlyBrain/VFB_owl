#!/usr/bin/env jython -J-Xmx8000m
import warnings
import sys
sys.path.append('../mod')
from obo_tools import addOboAnnotationProperties
from uk.ac.ebi.brain.error import BrainException
from uk.ac.ebi.brain.core import Brain
from lmb_fc_tools import get_con
from vfb_ind_tools import gen_ind_by_source
from vfb_ind_tools import load_ont
from dict_cursor import dict_cursor
import uuid


expPat = Brain()
fbbt = Brain()
fb_feat = Brain()
fbf_base = "http://flybase.org/reports/"

# Can't run this until have Edinburgh server access!!!!

def expression_annotation_to_owl(cursor, ont_dict, FBrf, thumb_path):
	## Aim: To add axioms to expression pattern individuals.
	# But perhaps the best strategy is to make classes defined via equivalence and then have a generic script to propagate down.
	## New classes generated by this method have UUID shortFormID.
	## EC def = expression pattern that expresses some X
	## Could add  'and part of some Y' - but this would have to be added externally on a paper by paper basis...
	## Then add overlaps as hidden GCIs
	
	## Currently running by FBrf
	cursor.execute("SELECT DISTINCT fbbt.cvterm_name AS anatomy, fbbt.db_name AS idp, "
	"fbbt.accession, teg.transgene_name, teg.transgene_uniquename " \
	"FROM vfbview_fbbt fbbt " \
  	"JOIN expression_cvterm ec1 ON (fbbt.cvterm_id = ec1.cvterm_id) " \
  	"JOIN expression_cvterm ec2 ON (ec2.expression_id = ec1.expression_id) " \
  	"JOIN cvterm stage ON (stage.cvterm_id = ec2.cvterm_id) " \
  	"JOIN feature_expression fe ON (ec1.expression_id = fe.expression_id) " \
  	"JOIN pub ON (fe.pub_id = pub.pub_id) " \
  	"JOIN vfbview_transgene_expressed_gp teg ON (teg.gp_feature_id = fe.feature_id) " \
	"-- WHERE teg.transgene_name = '' " \
	"AND pub.uniquename = '%s'" % FBrf) 

	feat_ont = ont_dict['fb_feature']  # URI pattern: http://flybase.org/reports/FBtp0062283
	fbbt = ont_dict['fbbt'] # 
	
	dc = dict_cursor(cursor)
    ec_stat = {}
	for d in dc:
        ec_exp = "B8C6934B-C27C-4528-BE59-E75F5B9F61B6 that RO_0002292 some %s" % d['transgene_uniquename']
		# Expression pattern that expresses some X
		if not expPat.equivalentClass(ec_exp):
            id = str(uuid.uuid1())
            exPat.addClass(id)
            # if doesn't know classes referenced
        
        if not expPat.knows(fbf_base + d['transgene_uniquename']):
            exPat.addClass(fbf_base + d['transgene_uniquename'])
			exPat.addLabel(("%s expression pattern in the adult brain" % d['transgene_name'])
            exPat.equivalentClasses(id, ex_exp) # Hmmm - might get missed if ont already knows
        if not exPat.knows(fbbt_base + "FBbt_" + d['accession'])
			exPat.addClass(fbbt_base + "FBbt_" + d['accession'])
			
		exPat.subClassOf(id, ("RO_0002131 some %s" % ("FBbt_" + d['accession']))) # overlaps some blah
        
        
        
	
