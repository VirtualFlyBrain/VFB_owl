#!/usr/bin/env jython -J-Xmx8000m
import warnings
import sys
sys.path.append('../mod')
from obo_tools import addOboAnnotationProperties
from uk.ac.ebi.brain.error import BrainException
from uk.ac.ebi.brain.core import Brain
from dict_cursor import dict_cursor
import uuid
from com.ziclix.python.sql import zxJDBC # FOR DB connection
import urllib2




def expression_annotation_to_owl(cursor, ont_dict, FBrf):
	## Aim: To add axioms to expression pattern individuals.
	# But perhaps the best strategy is to make classes defined via equivalence and then have a generic script to propagate down.
	## New classes generated by this method have UUID shortFormID.
	## EC def = expression pattern that expresses some X
	## Could add  'and part of some Y' - but this would have to be added externally on a paper by paper basis...
	## Then add overlaps as hidden GCIs
	
	## Currently running by FBrf
	cursor.execute("SELECT DISTINCT fbbt.cvterm_name AS anatomy, fbbt.db_name AS idp, "
	"fbbt.accession, teg.transgene_name, teg.transgene_uniquename " \
	"FROM vfbview_fbbt fbbt " \
	"JOIN expression_cvterm ec1 ON (fbbt.cvterm_id = ec1.cvterm_id) " \
	"JOIN expression_cvterm ec2 ON (ec2.expression_id = ec1.expression_id) " \
	"JOIN cvterm stage ON (stage.cvterm_id = ec2.cvterm_id) " \
	"JOIN feature_expression fe ON (ec1.expression_id = fe.expression_id) " \
	"JOIN pub ON (fe.pub_id = pub.pub_id) " \
	"JOIN vfbview_transgene_expressed_gp teg ON (teg.gp_feature_id = fe.feature_id) " \
	"-- WHERE teg.transgene_name = '' " \
	"AND pub.uniquename = '%s'" % FBrf) 

	fb_feat = ont_dict['fb_feat']  # URI pattern: http://flybase.org/reports/FBtp0062283
	fbbt = ont_dict['fbbt'] #
	expPat = ont_dict['expPat']
	
	dc = dict_cursor(cursor)
	for d in dc:
		ec_exp = "B8C6934B-C27C-4528-BE59-E75F5B9F61B6 that RO_0002292 some %s" % d['transgene_uniquename']
		# Expression pattern that expresses some X
		if not expPat.equivalentClass(ec_exp):
			id = str(uuid.uuid1())
			expPat.addClass(id)
		# if doesn't know classes referenced
      
		if not expPat.knows(fbf_base + d['transgene_uniquename']):
			expPat.addClass(fbf_base + d['transgene_uniquename'])
			expPat.addLabel("%s expression pattern in the adult brain" % d['transgene_name'])
			  
			expPat.equivalentClasses(id, ec_exp) # Hmmm - might get missed if ont already knows
        	
		if not expPat.knows(fbbt_base + "FBbt_" + d['accession']):
			expPat.addClass(fbbt_base + "FBbt_" + d['accession'])
			  
		expPat.subClassOf(id, ("RO_0002131 some %s" % ("FBbt_" + d['accession']))) # overlaps some blah
        
	expPat.save("../../owl/expression_pattern_classes.owl")
	fbbt.sleep()
	fb_feat.sleep()
	expPat.sleep()

  
# Connect to chado

# Requires Edinburgh server access

conn = zxJDBC.connect("jdbc:postgresql://bocian.inf.ed.ac.uk/flybase" + "?ssl=true" + "&sslfactory=org.postgresql.ssl.NonValidatingFactory" , sys.argv[1], sys.argv[2], "org.postgresql.Driver") # Use for local installation
cursor = conn.cursor()

def download2Brain(baseURL, filename):
   # Downloading directly avoids intermittent timeout problems experienced with direct downloading
   ont_file = open(filename, "w")
   ont_download = urllib2.urlopen(baseURL + filename)
   ont_file.write(ont_download.read())
   ont = Brain()
   ont.learn(filename)
   return ont

expPat = Brain("http://purl.obolibrary.org/obo/fbbt/vfb/", "http://purl.obolibrary.org/obo/fbbt/vfb/exp_pat.owl")
fbbt = download2Brain("http://purl.obolibrary.org/obo/fbbt/", "fbbt-simple.owl")
fb_feat = download2Brain("http://purl.obolibrary.org/obo/fbbt/vfb/fb_features.owl")# May not work because of https redirect?

ont_dict = { 'fbbt': fbbt, 'fb_feat': fb_feat, 'expPat': expPat }

FBrf = 'FBrf0219498' # Janelia expression patterns

expression_annotation_to_owl(cursor, ont_dict, FBrf)

	
